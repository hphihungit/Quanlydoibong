import pandas as pd
from PyQt5.QtWidgets import QWidget, QLabel, QVBoxLayout, QPushButton, QFileDialog
from PyQt5.QtCore import Qt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

class StatisticsManager(QWidget):
    def __init__(self, go_back_callback=None):
        super().__init__()
        self.setWindowTitle("Th·ªëng k√™ ƒë·ªôi b√≥ng")
        self.setFixedSize(800, 800)
        self.go_back_callback = go_back_callback

        layout = QVBoxLayout()

        # Ti√™u ƒë·ªÅ
        title = QLabel("üìä TH·ªêNG K√ä ƒê·ªòI B√ìNG")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 20px; font-weight: bold;")
        layout.addWidget(title)

        # Bi·ªÉu ƒë·ªì t·ªïng h·ª£p tr·∫≠n ƒë·∫•u
        layout.addWidget(QLabel("\nüìà Bi·ªÉu ƒë·ªì th·ªëng k√™ tr·∫≠n ƒë·∫•u:"))
        self.match_chart = FigureCanvas(Figure(figsize=(5, 3)))
        layout.addWidget(self.match_chart)

        # Th·ªëng k√™ c·∫ßu th·ªß
        layout.addWidget(QLabel("\nüßç‚Äç‚ôÇÔ∏è Th·ªëng k√™ theo c·∫ßu th·ªß:"))
        self.best_scorer_label = QLabel()
        self.top_assist_label = QLabel()
        self.best_scorer_label.setStyleSheet("font-size: 14px;")
        self.top_assist_label.setStyleSheet("font-size: 14px;")
        layout.addWidget(self.best_scorer_label)
        layout.addWidget(self.top_assist_label)

        # Bi·ªÉu ƒë·ªì c·∫ßu th·ªß ghi b√†n
        layout.addWidget(QLabel("\nüìä Bi·ªÉu ƒë·ªì top c·∫ßu th·ªß ghi b√†n:"))
        self.goals_chart = FigureCanvas(Figure(figsize=(5, 3)))
        layout.addWidget(self.goals_chart)

        # N√∫t quay l·∫°i
        back_btn = QPushButton("‚¨Ö Quay l·∫°i")
        back_btn.clicked.connect(self.go_back)
        layout.addWidget(back_btn)

        # N√∫t t·∫£i v·ªÅ file Excel
        download_btn = QPushButton("üì• T·∫£i v·ªÅ Excel")
        download_btn.clicked.connect(self.download_excel)
        layout.addWidget(download_btn)

        self.setLayout(layout)


    def update_statistics(self, matches, players, home_stadium="Old Sanford"):
        self.matches = matches  # L∆∞u d·ªØ li·ªáu matches v√†o ƒë·ªëi t∆∞·ª£ng
        self.players = players  # L∆∞u d·ªØ li·ªáu players v√†o ƒë·ªëi t∆∞·ª£ng

        wins = losses = draws = goals_scored = goals_conceded = clean_sheets = 0
        home_wins = away_wins = 0

        for match in matches:
            result = match.get("result")
            if result == "win":
                wins += 1
                if match.get("location") == home_stadium:
                    home_wins += 1
                else:
                    away_wins += 1
            elif result == "loss":
                losses += 1
            else:
                draws += 1

            goals_scored += match.get("team_score", 0)
            goals_conceded += match.get("opponent_score", 0)

            if match.get("opponent_score", 1) == 0:
                clean_sheets += 1

        # C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì th·ªëng k√™ tr·∫≠n ƒë·∫•u
        self.update_match_chart(
            wins, losses, draws, goals_scored, goals_conceded,
            clean_sheets, home_wins, away_wins
        )

        # T√¨m c·∫ßu th·ªß ghi nhi·ªÅu b√†n / ki·∫øn t·∫°o nh·∫•t
        if players:
            max_goal = max(players, key=lambda x: x.get("goals", 0))
            max_assist = max(players, key=lambda x: x.get("assists", 0))

            self.best_scorer_label.setText(
                f"‚öΩ C·∫ßu th·ªß ghi nhi·ªÅu b√†n nh·∫•t: {max_goal['name']} ({max_goal['goals']})"
            )
            self.top_assist_label.setText(
                f"üéØ C·∫ßu th·ªß ki·∫øn t·∫°o nhi·ªÅu nh·∫•t: {max_assist['name']} ({max_assist['assists']})"
            )

            self.update_goal_chart(players)

    def update_match_chart(self, wins, losses, draws, goals_scored, goals_conceded,
                           clean_sheets, home_wins, away_wins):
        labels = [
            "Th·∫Øng", "H√≤a", "Thua", "B√†n th·∫Øng", "B√†n thua",
            "Gi·ªØ s·∫°ch l∆∞·ªõi", "Th·∫Øng s√¢n nh√†", "Th·∫Øng s√¢n kh√°ch"
        ]
        values = [
            wins, draws, losses, goals_scored, goals_conceded,
            clean_sheets, home_wins, away_wins
        ]
        colors = ["#4CAF50", "#FFC107", "#F44336", "#2196F3", "#FF9800", "#9C27B0", "#3F51B5", "#009688"]

        fig = self.match_chart.figure
        fig.clear()
        ax = fig.add_subplot(111)
        ax.bar(labels, values, color=colors)
        ax.set_title("T·ªïng h·ª£p ch·ªâ s·ªë tr·∫≠n ƒë·∫•u")
        ax.set_ylabel("S·ªë l∆∞·ª£ng")
        ax.tick_params(axis='x', rotation=30)
        fig.tight_layout()
        self.match_chart.draw()

    def update_goal_chart(self, players, top_n=7):
        sorted_players = sorted(players, key=lambda x: x.get("goals", 0), reverse=True)[:top_n]
        names = [p["name"] for p in sorted_players]
        goals = [p.get("goals", 0) for p in sorted_players]

        fig = self.goals_chart.figure
        fig.clear()
        ax = fig.add_subplot(111)
        ax.barh(names, goals, color="skyblue")
        ax.set_xlabel("S·ªë b√†n th·∫Øng")
        ax.set_title(f"Top {top_n} c·∫ßu th·ªß ghi b√†n")
        ax.invert_yaxis()
        fig.tight_layout()
        self.goals_chart.draw()

    def export_statistics_to_excel(self, matches, players, file_path):
        # X√°c ƒë·ªãnh s√¢n nh√† ƒë·ªÉ ph√¢n bi·ªát th·∫Øng s√¢n nh√†/s√¢n kh√°ch
        home_stadium = "Old Sanford"

        # T√≠nh to√°n th·ªëng k√™ tr·∫≠n ƒë·∫•u
        wins = losses = draws = goals_scored = goals_conceded = clean_sheets = 0
        home_wins = away_wins = 0

        for match in matches:
            result = match.get("result")
            if result == "win":
                wins += 1
                if match.get("location") == home_stadium:
                    home_wins += 1
                else:
                    away_wins += 1
            elif result == "loss":
                losses += 1
            else:
                draws += 1

            goals_scored += match.get("team_score", 0)
            goals_conceded += match.get("opponent_score", 0)

            if match.get("opponent_score", 1) == 0:
                clean_sheets += 1

        # Ghi th·ªëng k√™ tr·∫≠n ƒë·∫•u v√†o DataFrame
        match_stats = {
            "Th·ªëng k√™": [
                "Th·∫Øng", "H√≤a", "Thua", "B√†n th·∫Øng", "B√†n thua",
                "Gi·ªØ s·∫°ch l∆∞·ªõi", "Th·∫Øng s√¢n nh√†", "Th·∫Øng s√¢n kh√°ch"
            ],
            "S·ªë l∆∞·ª£ng": [
                wins, draws, losses, goals_scored, goals_conceded,
                clean_sheets, home_wins, away_wins
            ]
        }
        df_matches = pd.DataFrame(match_stats)

        # Ghi th·ªëng k√™ c·∫ßu th·ªß v√†o DataFrame
        player_stats = {
            "C·∫ßu th·ªß": [player["name"] for player in players],
            "S·ªë b√†n th·∫Øng": [player.get("goals", 0) for player in players],
            "S·ªë ki·∫øn t·∫°o": [player.get("assists", 0) for player in players]
        }
        df_players = pd.DataFrame(player_stats)

        # Xu·∫•t ra file Excel
        with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
            df_matches.to_excel(writer, sheet_name='Th·ªëng k√™ tr·∫≠n ƒë·∫•u', index=False)
            df_players.to_excel(writer, sheet_name='Th·ªëng k√™ c·∫ßu th·ªß', index=False)

    def download_excel(self):
        if not hasattr(self, 'matches') or not hasattr(self, 'players'):
            print("Ch∆∞a c√≥ d·ªØ li·ªáu th·ªëng k√™ ƒë·ªÉ t·∫£i v·ªÅ.")
            return

        # M·ªü h·ªôp tho·∫°i ƒë·ªÉ ch·ªçn ƒë∆∞·ªùng d·∫´n l∆∞u file
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getSaveFileName(self, "L∆∞u file Excel", "", "Excel Files (*.xlsx);;All Files (*)", options=options)

        if file_path:
            # Xu·∫•t th·ªëng k√™ ra file Excel
            self.export_statistics_to_excel(self.matches, self.players, file_path)

    def go_back(self):
        if self.go_back_callback:
            self.go_back_callback()



