from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QPushButton, QTableWidget,
    QTableWidgetItem, QHBoxLayout, QLineEdit, QFormLayout, QMessageBox
)
from PyQt5.QtCore import Qt
from db import connect_db

from PyQt5.QtWidgets import QApplication
import sys
from PyQt5.QtWidgets import QDateEdit
from PyQt5.QtCore import QDate
from datetime import datetime


class PlayerManager(QWidget):
    def __init__(self, go_back_callback=None):
        super().__init__()
        self.setWindowTitle("Qu·∫£n l√Ω c·∫ßu th·ªß")
        self.setFixedSize(1300, 800)
        self.go_back_callback = go_back_callback

        layout = QVBoxLayout()

        title = QLabel("‚öΩ QU·∫¢N L√ù C·∫¶U TH·ª¶")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 20px; font-weight: bold;")
        layout.addWidget(title)

        # B·∫£ng c·∫ßu th·ªß
        self.table = QTableWidget()
        self.table.setColumnCount(10)
        self.table.setHorizontalHeaderLabels([
            "ID", "H·ªç t√™n", "Ng√†y sinh", "V·ªã tr√≠", "Qu·ªëc t·ªãch",
            "S·ªë √°o", "Chi·ªÅu cao", "C√¢n n·∫∑ng", "Ghi b√†n", "Ki·∫øn t·∫°o"
        ])
        self.table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.table.cellClicked.connect(self.load_selected_player)
        layout.addWidget(self.table)

        # Form
        form_layout = QFormLayout()
        self.name_input = QLineEdit()
        self.birthday_input = QLineEdit()
        self.position_input = QLineEdit()
        self.country_input = QLineEdit()
        self.shirt_number_input = QLineEdit()
        self.height_input = QLineEdit()
        self.weight_input = QLineEdit()
        self.goals_input = QLineEdit()
        self.assists_input = QLineEdit()

        form_layout.addRow("H·ªç t√™n:", self.name_input)
        # form_layout.addRow("Ng√†y sinh (YYYY-MM-DD):", self.birthday_input)

        self.birthday_input = QDateEdit()
        self.birthday_input.setDisplayFormat("dd/MM/yyyy")
        self.birthday_input.setCalendarPopup(True)
        self.birthday_input.setDate(QDate.currentDate())  # ƒë·∫∑t ng√†y hi·ªán t·∫°i l√†m m·∫∑c ƒë·ªãnh

        form_layout.addRow("Ng√†y sinh (dd/MM/yyyy):", self.birthday_input)

        form_layout.addRow("V·ªã tr√≠:", self.position_input)
        form_layout.addRow("Qu·ªëc t·ªãch:", self.country_input)
        form_layout.addRow("S·ªë √°o:", self.shirt_number_input)
        form_layout.addRow("Chi·ªÅu cao:", self.height_input)
        form_layout.addRow("C√¢n n·∫∑ng:", self.weight_input)
        form_layout.addRow("S·ªë b√†n th·∫Øng:", self.goals_input)
        form_layout.addRow("S·ªë ki·∫øn t·∫°o:", self.assists_input)

        layout.addLayout(form_layout)

        # N√∫t thao t√°c
        btn_layout = QHBoxLayout()
        add_btn = QPushButton("Th√™m")
        update_btn = QPushButton("C·∫≠p nh·∫≠t")
        delete_btn = QPushButton("X√≥a")
        clear_btn = QPushButton("Clear")
        back_btn = QPushButton("‚¨Ö Quay l·∫°i")

        add_btn.clicked.connect(self.add_player)
        update_btn.clicked.connect(self.update_player)
        delete_btn.clicked.connect(self.delete_player)
        clear_btn.clicked.connect(self.clear_form)
        back_btn.clicked.connect(self.go_back)

        btn_layout.addWidget(add_btn)
        btn_layout.addWidget(update_btn)
        btn_layout.addWidget(delete_btn)
        btn_layout.addWidget(clear_btn)
        btn_layout.addWidget(back_btn)
        layout.addLayout(btn_layout)

        self.setLayout(layout)
        self.selected_player_id = None
        self.load_players()

    def load_players(self):
        self.table.setRowCount(0)
        try:
            print("üîó ƒêang k·∫øt n·ªëi CSDL...")
            try:
                conn = connect_db()
                print("‚úÖ ƒê√£ k·∫øt n·ªëi DB")
            except Exception as e:
                print("‚ùå L·ªói khi connect_db():", e)

            try:
                cursor = conn.cursor()
                print("‚úÖ ƒê√£ t·∫°o cursor")
            except Exception as e:
                print("‚ùå L·ªói khi t·∫°o cursor:", e)
            print("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng, th·ª±c hi·ªán truy v·∫•n...")
            cursor.execute(
                "SELECT * FROM players"
            )
            rows = cursor.fetchall()
            print(f"üì• S·ªë d√≤ng l·∫•y ƒë∆∞·ª£c: {len(rows)}")

            for row_data in rows:
                print(f"üìÑ D√≤ng: {row_data}")
                row = self.table.rowCount()
                self.table.insertRow(row)
                for col, data in enumerate(row_data):
                    self.table.setItem(row, col, QTableWidgetItem(str(data)))

            cursor.close()
            conn.close()
            print("‚úÖ Load d·ªØ li·ªáu xong")
        except Exception as e:
            print("‚ùå L·ªói:", e)
            import traceback
            traceback.print_exc()
            # QMessageBox.critical(self, "L·ªói khi t·∫£i d·ªØ li·ªáu", str(e))

    def load_selected_player(self, row, _col):
        # L∆∞u id v√†o bi·∫øn selected_player_id
        self.selected_player_id = self.table.item(row, 0).text()

        # C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng th√¥ng tin c·∫ßu th·ªß t·ª´ b·∫£ng
        self.name_input.setText(self.table.item(row, 1).text())

        # L·∫•y gi√° tr·ªã ng√†y sinh t·ª´ b·∫£ng v√† chuy·ªÉn ƒë·ªïi th√†nh QDate
        birthday_str = self.table.item(row, 2).text()
        birthday_date = QDate.fromString(birthday_str, "dd/MM/yyyy")
        self.birthday_input.setDate(birthday_date)

        self.position_input.setText(self.table.item(row, 3).text())
        self.country_input.setText(self.table.item(row, 4).text())
        self.shirt_number_input.setText(self.table.item(row, 5).text())
        self.height_input.setText(self.table.item(row, 6).text())
        self.weight_input.setText(self.table.item(row, 7).text())
        self.goals_input.setText(self.table.item(row, 8).text())
        self.assists_input.setText(self.table.item(row, 9).text())

    def add_player(self):
        try:
            # Chuy·ªÉn ƒë·ªïi chu·ªói ng√†y sinh t·ª´ ƒë·ªãnh d·∫°ng dd/MM/yyyy th√†nh yyyy-MM-dd
            birthday_str = self.birthday_input.text()
            birthday = datetime.strptime(birthday_str, "%d/%m/%Y").date()

            conn = connect_db()
            cursor = conn.cursor()
            sql = """
                INSERT INTO players
                (name, birthday, position, country, shirt_number, height, weight, goals, assists)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """
            data = (
                self.name_input.text(), birthday, self.position_input.text(),
                self.country_input.text(), int(self.shirt_number_input.text()),
                float(self.height_input.text()), float(self.weight_input.text()),
                int(self.goals_input.text()), int(self.assists_input.text())
            )
            cursor.execute(sql, data)
            conn.commit()
            cursor.close()
            conn.close()
            QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ th√™m c·∫ßu th·ªß.")
            self.load_players()
            self.clear_form()
        except ValueError:
            QMessageBox.critical(self, "L·ªói ƒë·ªãnh d·∫°ng", "Ng√†y sinh ph·∫£i ·ªü ƒë·ªãnh d·∫°ng dd/MM/yyyy.")
        except Exception as e:
            QMessageBox.critical(self, "L·ªói th√™m c·∫ßu th·ªß", str(e))

    def delete_player(self):
        if not self.selected_player_id:
            QMessageBox.warning(self, "Ch·ªçn c·∫ßu th·ªß", "Vui l√≤ng ch·ªçn c·∫ßu th·ªß ƒë·ªÉ x√≥a.")
            return
        try:
            conn = connect_db()
            cursor = conn.cursor()
            cursor.execute("DELETE FROM players WHERE id=%s", (self.selected_player_id,))
            conn.commit()
            cursor.close()
            conn.close()
            QMessageBox.information(self, "X√≥a th√†nh c√¥ng", "ƒê√£ x√≥a c·∫ßu th·ªß.")
            self.load_players()
            self.clear_form()
        except Exception as e:
            QMessageBox.critical(self, "L·ªói x√≥a c·∫ßu th·ªß", str(e))

    def update_player(self):
        if not self.selected_player_id:
            QMessageBox.warning(self, "Ch·ªçn c·∫ßu th·ªß", "Vui l√≤ng ch·ªçn c·∫ßu th·ªß ƒë·ªÉ c·∫≠p nh·∫≠t.")
            return
        try:
            # Chuy·ªÉn ƒë·ªïi ng√†y sinh th√†nh ƒë·ªãnh d·∫°ng ƒë√∫ng ƒë·ªÉ c·∫≠p nh·∫≠t
            birthday_str = self.birthday_input.text()
            birthday = datetime.strptime(birthday_str, "%d/%m/%Y").date()

            conn = connect_db()
            cursor = conn.cursor()

            # SQL ƒë·ªÉ c·∫≠p nh·∫≠t c·∫ßu th·ªß
            sql = """
                UPDATE players SET
                name=%s, birthday=%s, position=%s, country=%s,
                shirt_number=%s, height=%s, weight=%s, goals=%s, assists=%s
                WHERE id=%s
            """
            data = (
                self.name_input.text(), birthday, self.position_input.text(),
                self.country_input.text(), int(self.shirt_number_input.text()),
                float(self.height_input.text()), float(self.weight_input.text()),
                int(self.goals_input.text()), int(self.assists_input.text()),
                self.selected_player_id  # D√πng selected_player_id ƒë·ªÉ c·∫≠p nh·∫≠t
            )

            cursor.execute(sql, data)
            conn.commit()
            cursor.close()
            conn.close()

            # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v√† t·∫£i l·∫°i danh s√°ch c·∫ßu th·ªß
            QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t c·∫ßu th·ªß.")
            self.load_players()
            self.clear_form()
        except Exception as e:
            QMessageBox.critical(self, "L·ªói c·∫≠p nh·∫≠t", str(e))

    def clear_form(self):
        self.name_input.clear()
        self.birthday_input.clear()
        self.position_input.clear()
        self.country_input.clear()
        self.shirt_number_input.clear()
        self.height_input.clear()
        self.weight_input.clear()
        self.goals_input.clear()
        self.assists_input.clear()
        self.selected_player_id = None

    def go_back(self):
        if self.go_back_callback:
            self.go_back_callback()

